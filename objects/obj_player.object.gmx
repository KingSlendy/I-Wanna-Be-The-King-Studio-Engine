<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_playerIdle</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-10</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>spr_maskPlayer</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>mask_index = cond_exp(global.grav == 1, spr_maskPlayer, spr_maskPlayerFlip);
image_speed = 0.2;
xScale = global.lastxScale;

maxSpeed = 3;
maxVSpeed = 9;

jumpsHeight = new_array(8.5, 7);
jumps = 2;
scr_recoverJumps();

gravity = 0.4 * global.grav;

onLand = false;
onPlatform = false;
frozen = false;

if (global.gameStarted &amp;&amp; global.difficulty == 0 &amp;&amp; !instance_exists(obj_bow))
    instance_create(x, y, obj_bow);

if (global.autosave) {
    scr_saveGame(true);
    global.autosave = false;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>global.lastxScale = xScale;

with (obj_bow)
    instance_destroy();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (scr_outsideRoom())
    scr_killPlayer();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var L = scr_buttonHeld(global.leftButton);
var R = scr_buttonHeld(global.rightButton);
var h = 0;

if (!frozen) {
    if (R) {
        h = 1;
    } else if (L) {
        h = -1;
    }
}

onLand = place_meeting(x, y + global.grav, obj_block);
var onSlipBlock = instance_place(x, y + global.grav, obj_slipBlock);
var onVineL = (place_meeting(x - 1, y, obj_walljumpL) &amp;&amp; !onLand);
var onVineR = (place_meeting(x + 1, y, obj_walljumpR) &amp;&amp; !onLand);

if (h != 0) {
    if (!onVineR &amp;&amp; !onVineL) 
        xScale = h;
    
    if ((h == -1 &amp;&amp; !onVineR) || (h == 1 &amp;&amp; !onVineL)) {
        if (onSlipBlock == noone) {
            hspeed = maxSpeed * h;
        } else {
            hspeed += (onSlipBlock.slip) * h;
            
            if (abs(hspeed) &gt; maxSpeed)
                hspeed = maxSpeed * h;
        }
        
        image_speed = 0.5;
        sprite_index = spr_playerRunning;
    }
} else {
    if (onSlipBlock == noone) {
        hspeed = 0;
    } else {
        if (hspeed &gt; 0) {
            hspeed -= onSlipBlock.slip;
            
            if (hspeed &lt;= 0)
                hspeed = 0;
        } else if (hspeed &lt; 0) {
            hspeed += onSlipBlock.slip;
            
            if (hspeed &gt;= 0)
                hspeed = 0;
        }
    }
    
    image_speed = 0.2;
    sprite_index = spr_playerIdle;
}

if (!onPlatform) {
    if (vspeed * global.grav &lt; -0.05) {
        sprite_index = spr_playerJump;
    } else if (vspeed * global.grav &gt; 0.05) {
        sprite_index = spr_playerFall;
    }
} else {
    if (!place_meeting(x, y + 4 * global.grav, obj_platform)) {
        onPlatform = false;
    }
}

var onSlideBlock = instance_place(x, y + global.grav, obj_slideBlock);

if (onSlideBlock != noone)
    hspeed += onSlideBlock.h;

if (abs(vspeed) &gt; maxVSpeed)
    vspeed = sign(vspeed) * maxVSpeed;

if (!frozen) {
    if (scr_buttonPressed(global.jumpButton))
        scr_playerJump();

    if (scr_buttonReleased(global.jumpButton))
        scr_playerVJump();
        
    if (scr_buttonPressed(global.shootButton))
        scr_playerShoot();
        
    if (scr_buttonPressed(ord("Q")))
        scr_killPlayer();
        
    if (global.debugMode &amp;&amp; onLand) {
        if (scr_buttonPressed(ord("A")))
            hspeed = -1;
            
        if (scr_buttonPressed(ord("D")))
            hspeed = 1;
    }
}

if (onVineL || onVineR) {
    xScale = cond_exp(onVineR, -1, 1); 
    vspeed = 2 * global.grav;
    sprite_index = spr_playerSliding;
    image_speed = 1 / 2;
    
    if ((onVineL &amp;&amp; scr_buttonPressed(global.rightButton)) || (onVineR &amp;&amp; scr_buttonPressed(global.leftButton))) {
        if (scr_buttonHeld(global.jumpButton)) {
            hspeed = cond_exp(onVineR, -15, 15);
            vspeed = -9 * global.grav;
            audio_play_sound(snd_walljump,0,false);
            sprite_index = spr_playerJump;
        } else {
            hspeed = cond_exp(onVineR, -3, 3);
            sprite_index = spr_playerFall;
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_playerKiller">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>scr_killPlayer();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_platform">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (global.grav == 1) {
    if (y - vspeed / 2 &lt;= other.y) {
        if (other.vspeed &gt;= 0) {
            y = other.y - 9;
            vspeed = other.vspeed;
        }
        
        onPlatform = true;
        scr_recoverJumps();
    }
} else {
    if (y - vspeed / 2 &gt;= other.y + other.sprite_height - 1) {
        if (other.yspeed &lt;= 0) {
            y = other.y + other.sprite_height + 8;
            vspeed = other.yspeed;
        }
        
        onPlatform = true;
        scr_recoverJumps();
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_block">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (!place_free(x + hspeed, y)) {
    if (global.grav == 1) {
        if (hspeed &lt;= 0)
            move_contact_solid(180, abs(hspeed));
            
        if (hspeed &gt; 0)
            move_contact_solid(0, abs(hspeed));
    } else {
        if (hspeed &lt; 0)
            move_contact_solid(180, abs(hspeed));
            
        if (hspeed &gt;= 0)
            move_contact_solid(0, abs(hspeed));
    }
        
    hspeed = 0;
}
 
if (!place_free(x, y + vspeed)) {
    if (vspeed &lt;= 0) {
        move_contact_solid(90, abs(vspeed));
        
        if (global.grav == -1)
            scr_recoverJumps();
    }
        
    if (vspeed &gt; 0) {
        move_contact_solid(270, abs(vspeed));
        
        if (global.grav == 1)
            scr_recoverJumps();
    }
        
    vspeed = 0;
}

if (!place_free(x + hspeed, y + vspeed))
    hspeed = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_sprite_ext(sprite_index, image_index, x, y, image_xscale * xScale, image_yscale * global.grav, image_angle, image_blend, image_alpha);
//draw_sprite_ext(mask_index, 0, x, y, image_xscale, image_yscale, image_angle, c_white, image_alpha);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
